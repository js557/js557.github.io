<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>c++lambda表达式</title>
    <url>/2020/05/27/c++lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<style>
    code{
        color:#C82850 ;
        background:#FAF0F5;
    }

</style>

<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol>
<li>lambda表达式其实可以直接看做是一个函数</li>
<li>lambda表达式实际上可以转换成等价的类！</li>
</ol>
<h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p><code>[capture](parameters) mutable ->return-type{statement}</code></p>
<h3 id="最大优势："><a href="#最大优势：" class="headerlink" title="最大优势："></a>最大优势：</h3><p>可以以值传递/引用方式捕捉到上下文的变量，共lambda函数使用</p>
<h3 id="用法详细说明："><a href="#用法详细说明：" class="headerlink" title="用法详细说明："></a>用法详细说明：</h3><a id="more"></a>
<p>1.<code>[capture]</code>：捕捉列表。捕捉到的变量供lamb函数使用。相当于类中的成员变量</p>
<p>2.<code>(parameters)</code>：函数的参数列表。如果不需要参数传递，则可以连同括号“()”一起省略;</p>
<p>3.<code>mutable</code>：mutable修饰符。默认情况下，Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰符时，参数列表不可省略（即使参数为空）;</p>
<p>4.<code>->return-type</code>：返回类型。用追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符号”-&gt;”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导;</p>
<p>5.<code>{statement}</code>：函数体。除了可以使用参数列表中的参数之外，还可使用捕获到的变量。</p>
<h4 id="其中：-captrue-规则"><a href="#其中：-captrue-规则" class="headerlink" title="其中：[captrue]规则"></a>其中：[captrue]规则</h4><p>1.[var]表示值传递方式捕捉变量var；<br>2.[=]表示值传递方式捕捉所有父作用域的变量（包括this）；<br>3.[&amp;var]表示引用传递捕捉变量var；<br>4.[&amp;]表示引用传递方式捕捉所有父作用域的变量（包括this）；<br>5.[this]表示值传递方式捕捉当前的this指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cmp</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="comment">// z=5;//错误，const成员函数不可以修改非static成员变量</span></span><br><span class="line">        <span class="keyword">return</span> z &lt; a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//--------------例1----------------</span></span><br><span class="line">    <span class="keyword">int</span> z = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//该lambda表达式就等同于Cmp类，[]里的值相当于类中的成员变量,</span></span><br><span class="line">    <span class="comment">//(const int a)相当于类中cmp函数的形参列表</span></span><br><span class="line">    <span class="keyword">auto</span> const_a = [z](<span class="keyword">const</span> <span class="keyword">int</span> a) -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">        <span class="comment">// z=5;//这句是错的，因为lambda表达式不带mutable就是一个const函数，而const修饰成员函数是不可以改变类中非static成员变量的</span></span><br><span class="line">        <span class="keyword">return</span> z &gt; a;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"const_a(2)="</span> &lt;&lt; const_a(<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------例2----------------</span></span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> mutable_val = [=]() <span class="keyword">mutable</span> &#123;</span><br><span class="line">        val = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"_mutable_inner_val="</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 3</span></span><br><span class="line">    &#125;;</span><br><span class="line">    mutable_val();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mutable_val="</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 0</span></span><br><span class="line">    <span class="comment">/* 使用了mutable改变了lambda函数默认的const属性，</span></span><br><span class="line"><span class="comment">     * 但以值传递的方式在lambda函数体内修改val,只不过是修改了拷贝过来的局部变量val,</span></span><br><span class="line"><span class="comment">     * 就像swap(inta,int b)&#123;int t;t=a,a=b,b=t;&#125;,</span></span><br><span class="line"><span class="comment">     * 形参ab都是值传递过来的,当调用的时候使用的是swap(c,d),</span></span><br><span class="line"><span class="comment">     * 等完成了swap函数体,并不会改变实参,也就不会交换cd的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重点-当使用引用时，注意点！！！</span></span><br><span class="line">    <span class="comment">//--------------例3----------------</span></span><br><span class="line">    val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> const_ref = [&amp;]() &#123; val = <span class="number">4</span>; &#125;;</span><br><span class="line">    const_ref();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"const_ref_val="</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="comment">// val=4  虽在const函数，但改变了val!!!</span></span><br><span class="line">    <span class="comment">//--------------例4----------------</span></span><br><span class="line">    <span class="keyword">auto</span> mutable_ref_lambda = [&amp;]() <span class="keyword">mutable</span> &#123; val = <span class="number">5</span>; &#125;;</span><br><span class="line">    mutable_ref_lambda();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"mutable_ref_val"</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// val=5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考资料:<a href="https://blog.csdn.net/u010984552/article/details/53634513" target="_blank" rel="noopener">https://blog.csdn.net/u010984552/article/details/53634513</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo下建blog的坑点</title>
    <url>/2020/03/17/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E5%9D%91%E7%82%B9/</url>
    <content><![CDATA[<style>
    code{
        color:#C82850 ;
        background:#FAF0F5;
    }

</style>

<h2 id="坑点1——来必力评论不显示"><a href="#坑点1——来必力评论不显示" class="headerlink" title="坑点1——来必力评论不显示"></a>坑点1——来必力评论不显示</h2><p> 用了最新版的next，找了很多篇配置讲解都是说，注册了来必力之后，把“来必力安装代码”中data-uid的值，直接替换掉主题配置文件中设置livere_uid的值就好，但是弄了很久，也不知道是我的next问题还是怎么样，评论区一直没加载进来。</p>
<h3 id="获取来必力data-uid"><a href="#获取来必力data-uid" class="headerlink" title="获取来必力data-uid"></a>获取来必力data-uid</h3><p><img src="/2020/03/17/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E5%9D%91%E7%82%B9/livere0.png" alt="avatar"></p>
<h3 id="替换主题配置文件-config-yml中的livere-uid"><a href="#替换主题配置文件-config-yml中的livere-uid" class="headerlink" title="替换主题配置文件_config.yml中的livere_uid"></a>替换主题配置文件_config.yml中的livere_uid</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="string">MTAyMC80OTE1MS8yNTY0NQ==</span></span><br></pre></td></tr></table></figure>




<p> 直到我换了next四个主题中的其中一个之后，评论区就科幻的成功加载进来了！！！</p>
<a id="more"></a>
<h3 id="换主题方法"><a href="#换主题方法" class="headerlink" title="换主题方法"></a>换主题方法</h3><p>在主题配置文件(themes/next/config.yml)中，搜索Schemes就会找到主题模块，切换成你想要的主题即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/17/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E5%9D%91%E7%82%B9/result0.jpg" alt="result.png"><br>不过，试了好多次之后又发现，有时候评论区也没有加载进来，个人觉得…可能是因为本身就加载慢。</p>
<h2 id="坑点2——文章导入本地图片不显示"><a href="#坑点2——文章导入本地图片不显示" class="headerlink" title="坑点2——文章导入本地图片不显示"></a>坑点2——文章导入本地图片不显示</h2><p>按网上常规步骤弄完，图片仍不显示！</p>
<h3 id="博客文章导入图片步骤"><a href="#博客文章导入图片步骤" class="headerlink" title="博客文章导入图片步骤"></a>博客文章导入图片步骤</h3><p>1.去站点配置文件_config.yml中：将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code><br>2.站点下安装插件<code><font>npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> -- save<font></font></font></code><br>3.运行<code><font>hexo n "你的文件名"</font></code>，就会在source/_posts/路径下分别生成名为<code>"你的文件名.md"</code>的md文件和文件夹。将你要在文章中<u>引入的图片</u>放到这个文件夹下即可。</p>
<p>但是！并没有成功显示图片</p>
<h3 id="替换插件内容"><a href="#替换插件内容" class="headerlink" title="替换插件内容"></a>替换插件内容</h3><p>最后在CSND看到<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">一篇文章</a>，原来是因为前面安装的hexo-asset-image这个插件有bug，于是在/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> config = hexo.config;</span><br><span class="line"><span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">            !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">            <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">            <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">            <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">            src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">            $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/17/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E5%9D%91%E7%82%B9/result.jpg" alt="result.png"></p>
<h3 id="成功！撒花onYeah"><a href="#成功！撒花onYeah" class="headerlink" title="成功！撒花onYeah!"></a><center>成功！撒花onYeah!</center></h3>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
