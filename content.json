{"meta":{"title":"js557's blog","subtitle":"","description":"","author":"js557","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-03-18T09:17:47.000Z","updated":"2020-03-18T09:18:43.758Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"一个体贴善良可爱大方的大学生哇哈哈哈哈哈"},{"title":"分类","date":"2020-03-18T09:13:53.000Z","updated":"2020-03-18T09:15:19.862Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tag","date":"2020-03-18T09:16:46.000Z","updated":"2020-03-18T09:17:18.502Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C++lambda表达式","slug":"c++lambda表达式","date":"2020-05-27T09:59:22.286Z","updated":"2020-05-27T10:09:15.758Z","comments":true,"path":"2020/05/27/c++lambda表达式/","link":"","permalink":"http://yoursite.com/2020/05/27/c++lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"code{ color:#C82850 ; background:#FAF0F5; } 说明：1. 其实可以看做是一个函数 2. lambda表达式实际上可以转换成等价的类！用法：&lt;code&gt;[capture](parameters) mutable -&gt;return-type{statement}&lt;/code&gt;最大优势：可以以值传递/引用方式捕捉到上下文的变量，共lambda函数使用用法详细说明：1.[capture]：捕捉列表。捕捉到的变量供lamb函数使用。相当于类中的成员变量 2.(parameters)：函数的参数列表。如果不需要参数传递，则可以连同括号“()”一起省略; 3.mutable：mutable修饰符。默认情况下，Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰符时，参数列表不可省略（即使参数为空）; 4.-&gt;return-type：返回类型。用追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符号”-&gt;”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导; 5.{statement}：函数体。除了可以使用参数列表中的参数之外，还可使用捕获到的变量。其中：[captrue]规则1.[var]表示值传递方式捕捉变量var； 2.[=]表示值传递方式捕捉所有父作用域的变量（包括this）； 3.[&amp;var]表示引用传递捕捉变量var； 4.[&amp;]表示引用传递方式捕捉所有父作用域的变量（包括this）； 5.[this]表示值传递方式捕捉当前的this指针。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;iostream&gt;using namespace std;class Cmp &#123; public: int z; public: bool cmp(const int a) const &#123; // z=5;//错误，const成员函数不可以修改非static成员变量 return z &lt; a; &#125;&#125;;int main() &#123; //--------------例1---------------- int z = 1; //该lambda表达式就等同于Cmp类，[]里的值相当于类中的成员变量, //(const int a)相当于类中cmp函数的形参列表 auto const_a = [z](const int a) -&gt; bool &#123; // z=5;//这句是错的，因为lambda表达式不带mutable就是一个const函数，而const修饰成员函数是不可以改变类中非static成员变量的 return z &gt; a; &#125;; cout &lt;&lt; \"const_a(2)=\" &lt;&lt; const_a(2) &lt;&lt; endl&lt;&lt;endl; //--------------例2---------------- int val = 0; auto mutable_val = [=]() mutable &#123; val = 3; cout &lt;&lt; \"_mutable_inner_val=\" &lt;&lt; val &lt;&lt; endl; // 3 &#125;; mutable_val(); cout &lt;&lt; \"mutable_val=\" &lt;&lt; val &lt;&lt; endl &lt;&lt; endl;// 0 /* 使用了mutable改变了lambda函数默认的const属性， * 但以值传递的方式在lambda函数体内修改val,只不过是修改了拷贝过来的局部变量val, * 就像swap(inta,int b)&#123;int t;t=a,a=b,b=t;&#125;, * 形参ab都是值传递过来的,当调用的时候使用的是swap(c,d), * 等完成了swap函数体,并不会改变实参,也就不会交换cd的值 */ // 重点-当使用引用时，注意点！！！ //--------------例3---------------- val = 0; auto const_ref = [&amp;]() &#123; val = 4; &#125;; const_ref(); cout &lt;&lt; \"const_ref_val=\" &lt;&lt; val &lt;&lt; endl; // val=4 虽在const函数，但改变了val!!! //--------------例4---------------- auto mutable_ref_lambda = [&amp;]() mutable &#123; val = 5; &#125;; mutable_ref_lambda(); cout &lt;&lt; \"mutable_ref_val\" &lt;&lt; val &lt;&lt; endl; // val=5 return 0;&#125;","categories":[],"tags":[]},{"title":"hexo下建blog的坑点","slug":"hexo的next主题设置来必力评论坑点","date":"2020-03-17T15:50:34.000Z","updated":"2020-03-17T18:20:48.786Z","comments":true,"path":"2020/03/17/hexo的next主题设置来必力评论坑点/","link":"","permalink":"http://yoursite.com/2020/03/17/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E5%9D%91%E7%82%B9/","excerpt":"code{ color:#C82850 ; background:#FAF0F5; } 坑点1——来必力评论不显示 用了最新版的next，找了很多篇配置讲解都是说，注册了来必力之后，把“来必力安装代码”中data-uid的值，直接替换掉主题配置文件中设置livere_uid的值就好，但是弄了很久，也不知道是我的next问题还是怎么样，评论区一直没加载进来。 获取来必力data-uid 替换主题配置文件_config.yml中的livere_uid123# LiveRe comments system# You can get your uid from https://livere.com/insight/myCode (General web site)livere_uid: MTAyMC80OTE1MS8yNTY0NQ== 直到我换了next四个主题中的其中一个之后，评论区就科幻的成功加载进来了！！！","text":"code{ color:#C82850 ; background:#FAF0F5; } 坑点1——来必力评论不显示 用了最新版的next，找了很多篇配置讲解都是说，注册了来必力之后，把“来必力安装代码”中data-uid的值，直接替换掉主题配置文件中设置livere_uid的值就好，但是弄了很久，也不知道是我的next问题还是怎么样，评论区一直没加载进来。 获取来必力data-uid 替换主题配置文件_config.yml中的livere_uid123# LiveRe comments system# You can get your uid from https://livere.com/insight/myCode (General web site)livere_uid: MTAyMC80OTE1MS8yNTY0NQ== 直到我换了next四个主题中的其中一个之后，评论区就科幻的成功加载进来了！！！ 换主题方法在主题配置文件(themes/next/config.yml)中，搜索Schemes就会找到主题模块，切换成你想要的主题即可。 12345# Schemes#scheme: Musescheme: Mist#scheme: Pisces#scheme: Gemini 不过，试了好多次之后又发现，有时候评论区也没有加载进来，个人觉得…可能是因为本身就加载慢。 坑点2——文章导入本地图片不显示按网上常规步骤弄完，图片仍不显示！ 博客文章导入图片步骤1.去站点配置文件_config.yml中：将post_asset_folder: false改为post_asset_folder: true2.站点下安装插件npm install https://github.com/CodeFalling/hexo-asset-image -- save3.运行hexo n \"你的文件名\"，就会在source/_posts/路径下分别生成名为\"你的文件名.md\"的md文件和文件夹。将你要在文章中引入的图片放到这个文件夹下即可。 但是！并没有成功显示图片 替换插件内容最后在CSND看到一篇文章，原来是因为前面安装的hexo-asset-image这个插件有bug，于是在/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061'use strict';var cheerio = require('cheerio');// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-stringfunction getPosition(str, m, i) &#123;return str.split(m, i).join(m).length;&#125;var version = String(hexo.version).split('.');hexo.extend.filter.register('after_post_render', function(data)&#123;var config = hexo.config;if(config.post_asset_folder)&#123; var link = data.permalink; if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3) var beginPos = getPosition(link, '/', 1) + 1; else var beginPos = getPosition(link, '/', 3) + 1; // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\". var endPos = link.lastIndexOf('/') + 1; link = link.substring(beginPos, endPos); var toprocess = ['excerpt', 'more', 'content']; for(var i = 0; i &lt; toprocess.length; i++)&#123; var key = toprocess[i]; var $ = cheerio.load(data[key], &#123; ignoreWhitespace: false, xmlMode: false, lowerCaseTags: false, decodeEntities: false &#125;); $('img').each(function()&#123; if ($(this).attr('src'))&#123; // For windows style path, we replace '\\' to '/'. var src = $(this).attr('src').replace('\\\\', '/'); if(!/http[s]*.*|\\/\\/.*/.test(src) &amp;&amp; !/^\\s*\\//.test(src)) &#123; // For \"about\" page, the first part of \"src\" can't be removed. // In addition, to support multi-level local directory. var linkArray = link.split('/').filter(function(elem)&#123; return elem != ''; &#125;); var srcArray = src.split('/').filter(function(elem)&#123; return elem != '' &amp;&amp; elem != '.'; &#125;); if(srcArray.length &gt; 1) srcArray.shift(); src = srcArray.join('/'); $(this).attr('src', config.root + link + src); console.info&amp;&amp;console.info(\"update link as:--&gt;\"+config.root + link + src); &#125; &#125;else&#123; console.info&amp;&amp;console.info(\"no src attr, skipped...\"); console.info&amp;&amp;console.info($(this)); &#125; &#125;); data[key] = $.html(); &#125;&#125;&#125;); 成功！撒花onYeah!","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-17T02:33:37.042Z","updated":"2020-03-17T16:05:00.047Z","comments":true,"path":"2020/03/17/hello-world/","link":"","permalink":"http://yoursite.com/2020/03/17/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}